<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Systems Engineering on The Fewbytes legacy</title><link>http://fewbytes.com/tags/systems-engineering/</link><description>Recent content in Systems Engineering on The Fewbytes legacy</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 13 Jun 2015 11:34:02 +0300</lastBuildDate><atom:link href="http://fewbytes.com/tags/systems-engineering/index.xml" rel="self" type="application/rss+xml"/><item><title>The Problem With Configurations</title><link>http://fewbytes.com/the-problem-with-configurations/</link><pubDate>Sat, 13 Jun 2015 11:34:02 +0300</pubDate><guid>http://fewbytes.com/the-problem-with-configurations/</guid><description>&lt;p>&lt;em>Originally published in &lt;a href="http://www.netocratic.com/devops-the-problem-with-configurations-89297">Netocratic&lt;/a>&lt;/em>&lt;/p>
&lt;p>&lt;strong>Configuration&lt;/strong> is one of those things we usually take for granted. Yet, as more and more configurations are added the use of configurations becomes hard and complicated. With enough configuration parameters, keeping track of what the current configuration “is” can be quite problematic. Often, people misconfigure systems due to various reasons such as poor documentation or unexpected interactions between different parameters. Sometimes, the configuration itself can be complex and requires a language to express it, raising the bar of required knowledge for defining the configuration. Despite the “boring” nature of configurations they can and do &lt;a href="http://dealbook.nytimes.com/2012/08/02/knight-capital-says-trading-mishap-cost-it-440-million">obliterate entire companies in matter of hours&lt;/a>.&lt;/p></description></item><item><title>Docker, SELinux and the myth of kernel independence</title><link>http://fewbytes.com/docker-selinux-and-the-myth-of-kernel-independence/</link><pubDate>Fri, 21 Nov 2014 17:05:12 +0200</pubDate><guid>http://fewbytes.com/docker-selinux-and-the-myth-of-kernel-independence/</guid><description>Recently I built docker images for omnibus builds. Omnibus packages must be built on the target distro so I needed images for centos, debian and ubuntu. Usually I build such docker images on my laptop which is running Ubuntu; I try to make the builds as repeatable as possible using the excellent packer tool and when I publish images I build them again (using a build server) on cloud instances. In this case, I was using GCE CentOS 7 instance to perform the build and I was surprised when a build that was smooth on my laptop failed miserably.</description></item><item><title>Thoughts about configuration management</title><link>http://fewbytes.com/thoughts-about-configuration-management/</link><pubDate>Wed, 12 Feb 2014 09:56:48 +0200</pubDate><guid>http://fewbytes.com/thoughts-about-configuration-management/</guid><description>Current configuration management tools solve a huge problem, providing a way to place repeatable, eventually coordinated application and server setup on large scale environments.
Although we have come a long way since handcrafting our servers, even with Chef or Puppet, I still feel like we’re chasing our tails.
Virtual Human Before we had configurable software, we needed to edit a few source files or headers, change a few constants and recompile.</description></item><item><title>Autonomation in web systems</title><link>http://fewbytes.com/autonomation-in-web-systems/</link><pubDate>Sat, 25 May 2013 17:25:40 +0300</pubDate><guid>http://fewbytes.com/autonomation-in-web-systems/</guid><description>Yes, I got the spelling right. Autonomation is a manufacturing methodology originally developed by Toyota (part of the famed Toyota Production System). The idea is sort of like this: you have a machine on a production line; this machine is supervised by a human and is feeding its output to some other machine down the line. Occasionally something goes wrong, perhaps a defective product by the machine. The machine stops itself immediately and the human will fix/change the machine (not the product, the machine!</description></item><item><title>How to prevent Continuous Deployment from turning into a Continuous Disaster</title><link>http://fewbytes.com/how-to-prevent-continuous-deployment-from-turning-into-a-continuous-disaster/</link><pubDate>Sat, 13 Apr 2013 15:45:50 +0300</pubDate><guid>http://fewbytes.com/how-to-prevent-continuous-deployment-from-turning-into-a-continuous-disaster/</guid><description>These days, one the of most frequent request we hear from clients is setting up continuous deployment. Every company wants it, every DevOps related conference has sessions about it. However, newcomers tend to miss one of the key points of CI/CD – it really isn’t an automation problem, it’s a cultural problem. From a pure technical perspective implementing a build-deploy pipeline is fairly simple with current tools and this has been the case for several years.</description></item><item><title>IT is NOT ops</title><link>http://fewbytes.com/it-is-not-ops/</link><pubDate>Tue, 12 Feb 2013 15:06:49 +0200</pubDate><guid>http://fewbytes.com/it-is-not-ops/</guid><description>At the end of DevopsCon I participated in a panel discussing the future of Ops and DevOps. One thread of discussion at that panel followed a statement by Ben Kepes which basically amounted to &amp;ldquo;in the future, there won&amp;rsquo;t be any IT Ops guys anymore&amp;rdquo; (I can&amp;rsquo;t remember the exact wording, apologies). I was very disturbed by that statement; not because of fear for my profession, but rather because of the lack of dismay in the crowd.</description></item></channel></rss>